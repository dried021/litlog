<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bookfox.repository.BookMapper">
    <select id="exists" parameterType="String" resultType="Boolean">
        SELECT 
            CASE 
                WHEN EXISTS (SELECT 1 FROM book WHERE book_api_id = #{bookApiId}) THEN 1
                ELSE 0
            END AS is_book_exists
    </select>

    <select id="isLiked" parameterType="map" resultType="Boolean">
        SELECT 
            CASE    
                WHEN EXISTS (
                    SELECT 1 
                    FROM like_list 
                    WHERE target_id = #{id} 
                    AND user_id = #{userId} 
                    AND like_type = 2
                ) THEN 1
                ELSE 0
            END AS is_book_liked
    </select>

    <select id="getIdByBookApiId" parameterType="String" resultType="int">
        SELECT id 
        FROM book
        WHERE book_api_id = #{bookApiId}
    </select>

    <select id="getApiIdByBookId" parameterType="int" resultType="String">
        SELECT book_api_id
        FROM book
        WHERE id = #{bookId}
    </select>

    <select id="getBookshelfCount" parameterType="int" resultType="int">
        SELECT COUNT(*) 
        FROM book_shelf 
        WHERE book_id = #{id}
    </select>

    <select id="getLikeCount" parameterType="int" resultType="int">
        SELECT COUNT(*) 
        FROM like_list 
        WHERE target_id = #{id} AND like_type = 2
    </select>

    <select id="getReviewCount" parameterType="int" resultType="int">
        SELECT COUNT(*) 
        FROM book_review
        WHERE book_id = #{id}
    </select>

    <select id="getReviews" parameterType="map" resultType="com.bookfox.model.BookReviewDto">
        SELECT 
            br.id,
            br.user_id AS userId,
            br.book_id AS bookId,
            br.content,
            br.rating,
            br.creation_date AS creationDate,
            u.nickname AS nickname,

            (SELECT COUNT(*) 
            FROM like_list ll1 
            WHERE ll1.target_id = br.id AND ll1.like_type = 1) AS likeCount,

            CASE 
                WHEN ll2.target_id IS NOT NULL THEN true
                ELSE false
            END AS isLiked

        FROM book_review br

        LEFT JOIN like_list ll2 
            ON br.id = ll2.target_id 
            AND ll2.like_type = 1 
            AND ll2.user_id = #{userId}
        
        LEFT JOIN user u
            ON u.id = br.user_id

        WHERE br.book_id = #{id}

        <choose>
            <when test="isPopularity == true">
                ORDER BY likeCount DESC, br.creation_date DESC, br.id DESC
            </when>
            <otherwise>
                ORDER BY br.creation_date DESC, br.id DESC
            </otherwise>
        </choose>

        LIMIT 5 OFFSET #{offset};
    </select>

    <insert id="likeReview" parameterType="map">
        INSERT INTO like_list (user_id, target_id, like_type)
        VALUES (#{userId}, #{id}, 1)
    </insert>

    <delete id="unlikeReview" parameterType="map">
        DELETE FROM like_list
        WHERE user_id = #{userId} AND target_id = #{id} and like_type = 1
    </delete>

    <insert id="addBook" parameterType="com.bookfox.model.BookDto">
        INSERT INTO book (book_api_id, title, subtitle, authors, publisher, published_date, description, page_count, thumbnail, book_category)
        VALUES (#{bookApiId}, #{title}, #{subtitle}, #{authors}, #{publisher}, #{publishedDate}, #{description}, #{pageCount}, #{thumbnail}, #{bookCategory})
    </insert>

    <insert id="addBookshelf" parameterType="map">
        INSERT INTO book_shelf (book_id, user_id, shelf_type)
        VALUES (#{bookId}, #{userId}, #{option})
    </insert>

    <select id="checkBookshelf" parameterType="map" resultType="int">
        select COUNT(*) from book_shelf
        where book_id = #{bookId} and user_id = #{userId}
    </select>

    <select id="checkLike" parameterType="map" resultType="int">
        select COUNT(*) from like_list
        where target_id = #{bookId} and user_id = #{userId} and like_type = 2
    </select>

    <insert id = "addLike" parameterType="map">
        insert into like_list (target_id, user_id, like_type)
        values (#{bookId}, #{userId}, 2)
    </insert>

    <delete id="unlike" parameterType="map">
        DELETE FROM like_list
        WHERE user_id = #{userId} AND target_id = #{bookId} AND like_type = 2 
    </delete>

    <select id="checkReviewed" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM book_review br
        JOIN book b ON br.book_id = b.id
        WHERE br.user_id = #{userId}
        AND b.book_api_id = #{bookApiId}
    </select>

    <insert id="addReview" parameterType="map" useGeneratedKeys="true" keyProperty="id">
        insert into book_review (user_id, book_id, content, rating)
        values (#{userId}, #{bookId}, #{content}, #{rating})
    </insert>

    <select id="getPopularBookList" resultType="com.bookfox.model.BookListDto">
        SELECT 
            b.id,
            b.title,
            b.thumbnail AS image,

            (SELECT COUNT(*) 
            FROM book_shelf bs 
            WHERE bs.book_id = b.id) AS bookshelves,

            (SELECT COUNT(*) 
            FROM like_list ll 
            WHERE ll.target_id = b.id AND ll.like_type = 2) AS likes,

            (SELECT COUNT(*) 
            FROM book_review br 
            WHERE br.book_id = b.id) AS reviews

        FROM book b

        ORDER BY 
            (SELECT COUNT(*) 
            FROM book_shelf bs 
            WHERE bs.book_id = b.id AND bs.creation_date &gt;= NOW() - INTERVAL 7 DAY) +

            (SELECT COUNT(*) 
            FROM like_list ll 
            WHERE ll.target_id = b.id AND ll.like_type = 2 AND ll.creation_date &gt;= NOW() - INTERVAL 7 DAY) +

            (SELECT COUNT(*) 
            FROM book_review br 
            WHERE br.book_id = b.id AND br.creation_date &gt;= NOW() - INTERVAL 7 DAY) DESC

        LIMIT 20
    </select>

    <select id="getJustReviewedBookList" resultType="com.bookfox.model.BookListDto">
        SELECT 
            b.id,
            b.title,
            u.nickname AS nickname,
            b.thumbnail AS image,

            (SELECT COUNT(*) 
            FROM book_shelf bs 
            WHERE bs.book_id = b.id) AS bookshelves,

            (SELECT COUNT(*) 
            FROM like_list ll 
            WHERE ll.target_id = b.id AND ll.like_type = 2) AS likes,

            (SELECT COUNT(*) 
            FROM book_review br 
            WHERE br.book_id = b.id) AS reviews

        FROM book b

        LEFT JOIN book_review br
            ON br.book_id = b.id
        LEFT JOIN user u
            ON u.id = br.user_id
            
        ORDER BY 
            (SELECT MAX(br2.creation_date) 
            FROM book_review br2 
            WHERE br2.book_id = b.id ) DESC
        LIMIT 20
    </select>

    <select id="getPopularReviewList" parameterType="int" resultType="com.bookfox.model.BookReviewListDTO">
        SELECT 
            br.id,
            u.nickname AS nickname,
            br.user_id AS userId,
            br.book_id AS bookId,
            b.book_api_id AS bookApiId,
            b.title,
            b.authors,
            b.thumbnail,
            br.content,
            br.rating,
            br.creation_date AS creationDate,
            COALESCE(likeCount.likeCount, 0) AS likeCount
        FROM book_review br
        LEFT JOIN book b ON b.id = br.book_id
        LEFT JOIN user u
            ON u.id = br.user_id
        LEFT JOIN (
            SELECT target_id, COUNT(*) AS likeCount 
            FROM like_list 
            WHERE like_type = 1 
            GROUP BY target_id
        ) likeCount ON likeCount.target_id = br.id
        WHERE br.creation_date &gt;= NOW() - INTERVAL 7 DAY
        ORDER BY likeCount DESC
        LIMIT 5 OFFSET #{offset};
    </select>
    
</mapper>
