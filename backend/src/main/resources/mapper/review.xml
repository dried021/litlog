<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bookfox.repository.ReviewMapper">
  <select id="getReviewDetailById" resultType="com.bookfox.model.BookReviewDto">
    SELECT
      r.id,
      r.user_id,
      r.book_id,
      b.book_api_id,
      b.title,
      b.authors,
      b.publisher,
      b.page_count,
      r.content,
      r.rating,
      r.creation_date,
      b.thumbnail,
      b.published_date,
      u.profile_image AS userProfile,
      (
        SELECT COUNT(*) FROM like_list l
        WHERE l.target_id = r.id AND l.like_type = 1
      ) AS like_count,
      EXISTS (
        SELECT 1 FROM like_list l
        WHERE l.target_id = r.id
          AND l.user_id = #{loginUserId}
          AND l.like_type = 1
      ) AS isLiked
    FROM book_review r
    JOIN book b ON r.book_id = b.id
    JOIN user u ON r.user_id = u.id
    WHERE r.id = #{reviewId}
  </select>

  <select id="countAllReviewedBooks" resultType="int">
    SELECT COUNT(DISTINCT book_id)
    FROM book_review
    WHERE user_id = #{userId}
  </select>

  <select id="countWrittenReviews" resultType="int">
    SELECT COUNT(DISTINCT book_id)
    FROM book_review
    WHERE user_id = #{userId}
      AND content IS NOT NULL
      AND content != ''
  </select>

  <update id="updateReview">
    UPDATE book_review
    SET
      content = #{content},
      rating = #{rating},
      creation_date = #{creationDate}
    WHERE
      id = #{reviewId}
  </update>

  <delete id="deleteReview">
    DELETE FROM book_review
    WHERE id = #{reviewId}
  </delete>

  <select id="getReviewList" resultType="com.bookfox.model.BookReviewDto" parameterType="string">
    SELECT
      r.id,
      r.user_id AS userId,
      u.profile_img AS userProfile,
      r.book_id,
      b.book_api_id,
      b.title,
      r.content,
      r.rating,
      r.creation_date,
      (SELECT COUNT(*) FROM like_list l WHERE l.target_id = r.id AND l.like_type = 1) AS likeCount,
      CASE 
        WHEN EXISTS (
          SELECT 1 FROM like_list l 
          WHERE l.target_id = r.id AND l.user_id = #{userId} AND l.like_type = 1
        ) THEN TRUE
        ELSE FALSE
      END AS isLiked,
      COALESCE(b.thumbnail, '') AS thumbnail,
      b.published_date,
      b.authors,
      b.publisher,
      b.page_count
    FROM book_review r
    JOIN book b ON r.book_id = b.id
    JOIN user u ON r.user_id = u.id
    WHERE r.user_id = #{userId}
    ORDER BY r.creation_date DESC
  </select>
</mapper>
