<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bookfox.repository.ProfileMapper">
    <select id="getProfile" resultType="com.bookfox.model.ProfileDto" parameterType="String">
        SELECT *,
        (SELECT COUNT(*) FROM follow_list WHERE user_id=#{userId}) AS userFollowingCount,
        (SELECT COUNT(*) FROM follow_list WHERE follow_user_id=#{userId}) AS userFollowersCount,
        (SELECT COUNT(*) FROM book_review WHERE user_id=#{userId}) AS userReviewsCount,
        (SELECT COUNT(*) FROM book_collection WHERE user_id=#{userId}) AS userCollectionsCount,
        (SELECT COUNT(*) FROM book_shelf WHERE user_id=#{userId} AND shelf_type=3) AS totalBooksReadCount,
        (SELECT COUNT(*) FROM book_shelf WHERE user_id=#{userId} AND shelf_type=3 
            AND YEAR(creation_date) = YEAR(CURDATE())) AS annualBooksReadCount
        FROM user WHERE id=#{userId}
    </select>
    <select id="getFollowing" resultType="String" parameterType="String">
        SELECT follow_user_id AS id
        FROM follow_list
        WHERE user_id = #{userId}
    </select>
    <select id="getFollowers" resultType="String" parameterType="String">
        SELECT user_id AS id
        FROM follow_list
        WHERE follow_user_id = #{userId}
    </select>
    <select id="checkIsFollowing" resultType="boolean" parameterType="map">
        SELECT EXISTS
        (SELECT 1 FROM follow_list
            WHERE user_id = #{userId}
            AND follow_user_id = #{followUserId}
        )
    </select>
    <insert id="followUser" parameterType="map">
        INSERT INTO follow_list (user_id, follow_user_id) VALUES
        (#{userId}, #{followUserId})
    </insert>
    <delete id="unfollowUser" parameterType="map">
        DELETE FROM follow_list
        WHERE user_id = #{userId}
        AND follow_user_id = #{followUserId}
    </delete>
    <delete id="removeFollower" parameterType="map">
        DELETE FROM follow_list
        WHERE user_id = #{followUserId}
        AND follow_user_id = #{userId}
    </delete>
    <select id="getFavoriteBooks" resultType="com.bookfox.model.BookshelfDto" parameterType="map">
        SELECT 
            b.id as bookId, 
            b.book_api_id as bookApiId,
            b.title, 
            b.thumbnail,
            CASE
                WHEN ll.id IS NOT NULL THEN 1
                ELSE 0
            END AS likeStatus
        FROM book b
        JOIN like_list ll ON b.id = ll.target_id
        WHERE ll.user_id = #{userId}
        AND ll.like_type=2
        ORDER BY ll.creation_date DESC
        LIMIT #{count}
    </select>
    <select id="getRecentlyReadBooks" resultType="com.bookfox.model.BookshelfDto" parameterType="map">
        SELECT 
            bs.id,
            bs.book_id AS bookId,
            bs.user_id AS userId,
            bs.shelf_type AS shelfType,
            bs.creation_date AS creationDate,
            bs.progress,
            CASE 
                WHEN ll.id IS NOT NULL THEN 1
                ELSE 0
            END AS likeStatus,
            b.book_api_id AS bookApiId,
            b.thumbnail AS thumbnail,
            br.rating AS rating
        FROM book_shelf bs
        LEFT JOIN like_list ll 
            ON bs.book_id = ll.target_id 
            AND ll.user_id = #{userId} 
            AND ll.like_type = 2
        LEFT JOIN book b
            ON bs.book_id = b.id
        LEFT JOIN (
            SELECT book_id, user_id, MAX(rating) AS rating
            FROM book_review
            GROUP BY book_id, user_id
        ) br ON bs.book_id = br.book_id AND br.user_id = #{userId}
        WHERE bs.user_id = #{userId}
            AND bs.shelf_type = 3
        ORDER BY bs.creation_date DESC
        LIMIT #{count}
    </select>
    <select id="getRecentReviews" parameterType="map" resultType="com.bookfox.model.ProfileReviewDto">
        SELECT 
            br.id,
            br.user_id AS userId,
            br.book_id AS bookId,
            b.title,
            br.content,
            br.rating,
            br.creation_date AS creationDate,
            b.thumbnail,
            b.book_api_id AS bookApiId,
            (
                SELECT COUNT(*) 
                FROM like_list 
                WHERE target_id = br.id AND like_type = 1
            ) AS likeCount,
            (
                SELECT COUNT(*)
                FROM like_list
                WHERE target_id = br.book_id
                    AND like_type = 2
                    AND user_id = #{userId}
            ) AS likeStatus
        FROM book_review br
        JOIN book b ON br.book_id = b.id
        WHERE br.user_id = #{userId}
        ORDER BY br.creation_date DESC
        LIMIT #{count}
    </select>
    <select id="getPopularReviews" parameterType="map" resultType="com.bookfox.model.ProfileReviewDto">
        SELECT 
            br.id,
            br.user_id AS userId,
            br.book_id AS bookId,
            b.title,
            br.content,
            br.rating,
            br.creation_date AS creationDate,
            b.thumbnail,
            b.book_api_id AS bookApiId,
            (
                SELECT COUNT(*) 
                FROM like_list 
                WHERE target_id = br.id AND like_type = 1
            ) AS likeCount,
            (
                SELECT COUNT(*)
                FROM like_list
                WHERE target_id = br.book_id
                    AND like_type = 2
                    AND user_id = #{userId}
            ) AS likeStatus
        FROM book_review br
        JOIN book b ON br.book_id = b.id
        WHERE br.user_id = #{userId}
        ORDER BY likeCount DESC, br.creation_date DESC
        LIMIT #{count}
    </select>

</mapper>