<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bookfox.repository.BookshelfMapper">
    <select id="getCurrentlyReadingBooks" resultType="com.bookfox.model.BookshelfDto" parameterType="String">
        SELECT
            bs.id,
            bs.book_id AS bookId,
            bs.user_id AS userId,
            bs.shelf_type AS shelfType,
            bs.creation_date AS creationDate,
            bs.progress,
            b.book_api_id AS bookApiId,
            CASE 
                WHEN ll.id IS NOT NULL THEN 1
                ELSE 0
            END AS likeStatus,
            b.published_date AS publishedDate,
            b.thumbnail,
            b.page_count AS pageCount,
            b.title
        FROM book_shelf bs
        LEFT JOIN like_list ll 
            ON bs.book_id = ll.target_id 
            AND ll.user_id = #{userId} 
            AND ll.like_type = 2
        LEFT JOIN book b
            ON bs.book_id = b.id
        WHERE bs.user_id = #{userId}
            AND bs.shelf_type = 2
    </select>
    <select id="getReadBooks" resultType="com.bookfox.model.BookshelfDto" parameterType="String">
        SELECT
            bs.id,
            bs.book_id AS bookId,
            bs.user_id AS userId,
            bs.shelf_type AS shelfType,
            bs.creation_date AS creationDate,
            bs.progress,
            b.book_api_id AS bookApiId,
            CASE 
                WHEN ll.id IS NOT NULL THEN 1
                ELSE 0
            END AS likeStatus,
            b.published_date AS publishedDate,
            b.thumbnail,
            br.rating AS rating,
            b.page_count AS pageCount,
            b.title
        FROM book_shelf bs
        LEFT JOIN like_list ll 
            ON bs.book_id = ll.target_id 
            AND ll.user_id = #{userId} 
            AND ll.like_type = 2
        LEFT JOIN book b
            ON bs.book_id = b.id
        LEFT JOIN book_review br
            ON bs.book_id = br.book_id
            AND br.user_id = #{userId}
        WHERE bs.user_id = #{userId}
            AND bs.shelf_type = 3
        ORDER BY bs.creation_date DESC
    </select>
    <select id="getToReadBooks" resultType="com.bookfox.model.BookshelfDto" parameterType="String">
        SELECT
            bs.id,
            bs.book_id AS bookId,
            bs.user_id AS userId,
            bs.shelf_type AS shelfType,
            bs.creation_date AS creationDate,
            bs.progress,
            b.book_api_id AS bookApiId,
            CASE 
                WHEN ll.id IS NOT NULL THEN 1
                ELSE 0
            END AS likeStatus,
            b.published_date AS publishedDate,
            b.thumbnail,
            b.page_count AS pageCount,
            b.title
        FROM book_shelf bs
        LEFT JOIN like_list ll 
            ON bs.book_id = ll.target_id 
            AND ll.user_id = #{userId} 
            AND ll.like_type = 2
        LEFT JOIN book b
            ON bs.book_id = b.id
        WHERE bs.user_id = #{userId}
            AND bs.shelf_type = 1
    </select>
    <select id="getFavoriteBooks" resultType="com.bookfox.model.BookshelfDto" parameterType="String">
        SELECT
            b.id AS bookId,
            br.user_id AS userId,
            ll.creation_date AS creationDate,
            b.book_api_id AS bookApiId,
            CASE 
                WHEN ll.id IS NOT NULL THEN 1
                ELSE 0
            END AS likeStatus,
            br.rating,
            b.published_date AS publishedDate,
            b.thumbnail,
            b.page_count AS pageCount,
            b.title
        FROM like_list ll
        LEFT JOIN book b 
            ON ll.target_id = b.id
        LEFT JOIN book_review br
            ON b.id = br.book_id
            AND br.user_id = #{userId}
        WHERE 
            ll.user_id = #{userId} 
            AND ll.like_type = 2
    </select>
    <update id="updateProgress" parameterType="map">
        UPDATE book_shelf
        SET progress = #{progress}
        WHERE user_id = #{userId}
        AND book_id = #{bookId}
    </update>
    <delete id="removeBookshelf" parameterType="map">
        DELETE FROM book_shelf
        WHERE book_id = #{bookId}
        AND user_id = #{userId}
    </delete>
    <update id="moveBookshelf" parameterType="map">
        UPDATE book_shelf
        SET shelf_type = #{bookshelfType},
            creation_date = NOW(),
            progress = CASE
                WHEN #{bookshelfType} = 1 THEN 0
                WHEN #{bookshelfType} = 2 THEN 0
                WHEN #{bookshelfType} = 3 THEN 100
                ELSE 0
            END
        WHERE book_id = #{bookId}
        AND user_id = #{userId}
    </update>
    <delete id="unlikeBook" parameterType="map">
        DELETE FROM like_list
        WHERE target_id = #{bookId}
        AND user_id = #{userId}
        AND like_type = 2
    </delete>
</mapper>